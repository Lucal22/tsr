import type { GetStaticProps } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import Skeleton from '../../container/Posts/skeleton';
import { loadPosts, RequestResponse } from '../../data/load-posts';
import { PostPageTypes } from '../../Types/post';
import Posts from '../../container/Posts';
import { filterAttributes } from '../../utils/filter-attributes';

export default function Expansions({ posts, mount, letter }: PostPageTypes) {
  const router = useRouter();
  if (router.isFallback) {
    return <Skeleton />;
  }
  const expansions = filterAttributes(posts, 'category');
  console.log(expansions);
  return (
    <div>
      <Head>
        <title>The Scions Report - Expansões</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <h1>Título</h1>
      {/* <Posts posts={posts} mount={mount} letter={letter} filter={false} /> */}
    </div>
  );
}

export const getStaticProps: GetStaticProps<RequestResponse> = async () => {
  let data = null;
  try {
    data = await loadPosts();
  } catch (e) {
    data = null;
  }

  let mount = null;
  try {
    mount = await loadPosts({
      tagSlug: {
        eq: 'mounts' as string,
      },
    });
  } catch (e) {
    mount = null;
  }

  let letter = null;
  try {
    letter = await loadPosts({
      tagSlug: {
        eq: 'live-letter' as string,
      },
    });
  } catch (e) {
    letter = null;
  }
  if (
    !data ||
    !letter ||
    !mount ||
    !mount.posts ||
    !data.posts.data.length ||
    !mount.posts.data.length
  ) {
    return {
      notFound: true,
    };
  }
  return {
    props: {
      posts: data.posts,
      mount: mount.posts.data[0],
      letter: letter.posts.data[0],
    },
    revalidate: 24 * 60 * 60,
  };
};
